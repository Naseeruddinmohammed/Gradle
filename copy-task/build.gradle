task copyImages(type: Copy) {
	from 'images'
	into 'build'
}
task copyJpegs(type: Copy)
	from 'images'
	include '*.jpg'
	into 'build'
}
taks copyImagesFolder(type: Copy)
	from('images') {
	include '*jpg'
	into 'jpeg'
}
	from ('images') {
	include '*gif'
	into 'gif'

	}
	into 'build'
}

/*

Gradle provides task types for creating archives like Zip or Tar files.
Archive tasks are nearly identical to Copy tasks, except instead of specifying
a destination directory, we specify an archive name. Let's Zip up all files in
our "images" directory. We use the Zip task's "baseName" and "destinationDir"
properties to tell Gradle what to name the archive and where to create it.
Note that the "destinationDir" property takes a Java File object. Luckily the
Gradle Project interface provides a convenience method for creating files.

*/

task zipImages(type: Zip) {
    baseName = 'images'
    destinationDir = file('build')
    from 'images'
}
/*
We can do similar things with archive tasks and child CopySpecs. We can create
an archive which puts JPEGs and GIFs in their own directories inside the
archive. The only difference from our Copy task example is that we specify the
archive name and destination.

*/
task zipImageFolders(type: Zip) {
    baseName = 'images'
    destinationDir = file('build')

    from('images') {
        include '*.jpg'
        into 'jpeg'
    }

    from('images') {
        include '*.gif'
        into 'gif'
    }
}
/*

Sometimes we want to delete files during out builds. Usually to clean up
previous build outputs. We can use the Delete task to delete files or folders
in our project. Let's create a task that deletes the "build" folder.

*/

task deleteBuild(type: Delete) {
    delete 'build'
}

